{"name":"Pink","body":"## Welcome to Pink\r\nPink will let you build a modern web site using Java EE quickly and painlessly. It grew out of the frustration with Java ServerFaces 2.0. Pink is a small library that let's you do the most common things without a fuss.\r\n\r\n> As I kept working on the architecture of Pink, I realized that more and more it resembled Spring MVC. If you need a more robust alternative to Pink, by all means consider Spring MVC.\r\n\r\n### Key Features\r\n* JSF like managed beans, except Pink uses CDI managed beans.\r\n* JSR 303 bean validation.\r\n* SEO friendly URL. For example: /customers/show/12\r\n* Easy Ajax and JSON.\r\n* The framework is stateless and unlike JSF puts very little demand for memory.\r\n\r\n### Supported Servers\r\nPink requires a CDI compatible web container. It has been tested in JBoss AS 7 and TomEE Web profile 1.5.0. Pink will not work in a plain Tomcat server.\r\n\r\n### Getting Started\r\nTo use Pink, create a basic Dynamic Web project in Eclipse. Add Pink.jar to WEB-INF/lib. If you plan on using the JSON serialization, then add these JAR files to WEB-INF/lib:\r\n\r\n1. jackson-annotations-2.1.1.jar\r\n2. jackson-core-2.1.1.jar\r\n3. jackson-databind-2.1.1.jar\r\n\r\nRegister the Pink Servlet in web.xml.\r\n```\r\n<servlet>\r\n  <servlet-name>Pink Servlet</servlet-name>\r\n  <servlet-class>com.mobiarch.nf.Controller</servlet-class>\r\n  <load-on-startup>1</load-on-startup>\r\n</servlet>\r\n<servlet-mapping>\r\n  <servlet-name>Pink Servlet</servlet-name>\r\n  <url-pattern>/app/*</url-pattern>\r\n</servlet-mapping>\r\n```\r\n\r\nFinally, make sure that you have a **beans.xml** file in WEB-INF folder to enable CDI.\r\n\r\nYou can use the PinkTest web project to see how these things are done.\r\n\r\n### Basic Model View Controller\r\nA controller is a CDI managed bean. Here is a simple controller.\r\n\r\n```\r\n@Named(\"simple\")\r\n@RequestScoped\r\npublic class MySimpleController {\r\n\tString fullName;\r\n\tpublic String getFullName() {\r\n\t\treturn fullName;\r\n\t}\r\n\r\n\tpublic void setFullName(String fullName) {\r\n\t\tthis.fullName = fullName;\r\n\t}\r\n\t//Action handler method\r\n\tpublic String hello() {\r\n\t\treturn \"hello\";\r\n\t}\r\n}\r\n```\r\n\r\nHere, hello() is an action handler method. It is returning a String outcome. For a GET request, Pink treats the outcome to be a JSP file name (without the .jsp). By default, the file name is relative to the bean's name. So, create a JSP file called **/simple/hello.jsp** under the WebContent folder.\r\n\r\n```\r\n<html>\r\n<body>\r\n<p>Hi, ${simple.fullName}!</p>\r\n</body>\r\n</html>\r\n```\r\n\r\nNow, you can send a request to the hello() method, using the URI **/app/simple/hello?fullName=Daffy**. For example, if your web app's context root is SimpleWeb and the server is listening on port 8080, the full URL will be **http://localhost:8080/SimpleWeb/app/simple/hello?fullName=Daffy**. This will show a page saying \"Hi, Daffy!\".\r\n\r\nThe URI is very easy to form. Here, \"simple\" refers to the controller bean by its name. Then \"hello\" is a path that points to the hello() method. The \"fullName\" URL parameter sets the fullName property of the bean.\r\n\r\n### For Submission Handling\r\nPink uses simple URL parameter naming convention. As you have seen above, to update the fullName property of the controller, you send a URL parameter called fullName. It's that simple. A set of custom tags are provided to make your life even easier when designing forms.\r\n\r\nConsider a controller:\r\n\r\n```\r\n@Named(\"customers\")\r\n@RequestScoped\r\npublic class CustomerController {\r\n        Logger logger = Logger.getLogger(getClass().getName());\r\n        Customer customer = new Customer();\r\n\t@Inject\r\n\tContext context; //Pink request context\r\n\r\n\tpublic String register() {\r\n\t\tif (context.isPostBack()) {\r\n\t\t\tlogger.fine(\"Registering: \" + customer.getFullName() + \" Email: \" + customer.getEmail());\r\n                        //Create customer record in database...\r\n\r\n                        return \"show?customer.id=\" + 100;\r\n\t\t} else {\r\n\t\t\treturn \"new_customer_form\";\r\n\t\t}\r\n\t}\r\n        public String show() {\r\n            logger.fine(\"Showing customer: \" + customer.id);\r\n\r\n            return \"display_customer\";\r\n        }\r\n}\r\n\r\npublic class Customer {\r\n\tprivate String id;\r\n\tprivate String fullName;\r\n\tprivate String email;\r\n\r\n        //Getters and setters...\r\n}\r\n```\r\nThe register() method is used in two ways. A GET request shows the registration form. When the form is posted, a POST request creates a new customer in the database.\r\n\r\nThe form needs to be created in **/customers/new_customer_form.jsp** since the outcome returned by register() after a GET request is \"new_customer_form\". The JSP will look like this:\r\n\r\n```\r\n<%@ taglib uri=\"http://mobiarch\" prefix=\"p\" %>\r\n<html>\r\n<body>\r\n\r\n<p:form action=\"customers/register\" method=\"post\">\r\nName: <p:input type=\"text\" name=\"customer.fullName\"/><br/>\r\nE-mail: <p:input type=\"text\" name=\"customer.email\"/><br/>\r\n<input type=\"submit\" value=\"Add Customer\"/>\r\n</p:form>\r\n\r\n</body>\r\n</html>\r\n```\r\nThe action of the form is \"customers/register\". This will invoke the the register() method of our bean. The name attribute of the <p:input> tag refers to the property names of the bean. \r\n\r\nTo view the form, send a GET request for the URI: **/app/customers/register**. After the form is submitted, register() will be called. This time, we return an outcome \"show?customer.id=100\". As a best practice, POST should result in a redirection. Pink enforces that behavior by default. This outcome will redirect the browser to **/app/customers/show?customer.id=100**. This time show() will be called which will load /customers/display_customer.jsp.\r\n\r\n> Pink JSP tags can take any arbitrary attributes. That means, you can use the new HTML5 attributes or any custom attributes to drive a modern jQuery based application.\r\n\r\n### Form Validation\r\nPink uses JSR 303 for form validation. We can annotate the fields of the Customer class to set the validation rules.\r\n```\r\n@Size(min=3, max=15, message=\"The name must be at least 3 and maximum 15 characters long\")\r\nprivate String fullName;\r\n@Size(min=3, max=25, message=\"Please enter a valid e-mail\")\r\nprivate String email;\r\n```\r\nNow, the register method should re-display the form if validation fails.\r\n\r\n```\r\n\tpublic String register() {\r\n\t\tif (context.isPostBack() **&& context.isValidationFailed() == false**) {\r\n\t\t\tlogger.fine(\"Registering: \" + customer.getFullName() + \" Email: \" + customer.getEmail());\r\n                        //Create customer record in database...\r\n\r\n                        return \"show?customer.id=\" + 100;\r\n\t\t} else {\r\n\t\t\treturn \"new_customer_form\";\r\n\t\t}\r\n\t}\r\n\r\n```\r\n\r\nFinally, show the error messages above the form.\r\n\r\n```\r\n<p:errors style=\"color: red\"/>\r\n<p:form action=\"customers/register\" method=\"post\">\r\n...\r\n</p:form>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Pink is a framework to develop a modern web application quickly and easily using the Java EE stack."}